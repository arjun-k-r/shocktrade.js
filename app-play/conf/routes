# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                     com.shocktrade.controllers.Application.index
GET           /websocket                                            com.shocktrade.controllers.Application.webSocket

# Charts
GET           /api/charts/exposure/exchange/:id/:userID             com.shocktrade.controllers.ChartController.getExposureByExchange(id, userID)
GET           /api/charts/exposure/industry/:id/:userID             com.shocktrade.controllers.ChartController.getExposureByIndustry(id, userID)
GET           /api/charts/exposure/market/:id/:userID               com.shocktrade.controllers.ChartController.getExposureByMarket(id, userID)
GET           /api/charts/exposure/sector/:id/:userID               com.shocktrade.controllers.ChartController.getExposureBySector(id, userID)
GET           /api/charts/exposure/securities/:id/:userID           com.shocktrade.controllers.ChartController.getExposureBySecurities(id, userID)
GET           /api/charts/stock/:symbol/:size/:range                com.shocktrade.controllers.ChartController.getStockChart(symbol, size, range)
GET           /api/charts/ratings/:symbol                           com.shocktrade.controllers.ChartController.getAnalystRatings(symbol)

# Contests
PUT           /api/contest                                          com.shocktrade.controllers.ContestController.createContest
GET           /api/contest/:id                                      com.shocktrade.controllers.ContestController.getContestByID(id)
DELETE        /api/contest/:id                                      com.shocktrade.controllers.ContestController.deleteContestByID(id)
PUT           /api/contest/:id/chat                                 com.shocktrade.controllers.ContestController.createChatMessage(id)
POST          /api/contest/:id/host                                 com.shocktrade.controllers.ContestController.updateProcessingHost(id)
GET           /api/contest/:id/margin/:playerId/marketValue         com.shocktrade.controllers.ContestController.getMarginMarketValue(id, playerId)
PUT           /api/contest/:id/margin/:playerId                     com.shocktrade.controllers.ContestController.createMarginAccount(id, playerId)
POST          /api/contest/:id/margin/:playerId                     com.shocktrade.controllers.ContestController.transferFundsBetweenAccounts(id, playerId)
GET           /api/contest/:id/orders/:playerId                     com.shocktrade.controllers.ContestController.getEnrichedOrders(id, playerId)
GET           /api/contest/:id/perks                                com.shocktrade.controllers.ContestController.getAvailablePerks(id)
GET           /api/contest/:id/perks/:playerId                      com.shocktrade.controllers.ContestController.getPlayerPerks(id, playerId)
PUT           /api/contest/:id/perks/:playerId                      com.shocktrade.controllers.ContestController.purchasePerks(id, playerId)
PUT           /api/contest/:id/player                               com.shocktrade.controllers.ContestController.joinContest(id)
GET           /api/contest/:id/player/:playerId                     com.shocktrade.controllers.ContestController.getContestParticipant(id, playerId)
DELETE        /api/contest/:id/player/:playerId                     com.shocktrade.controllers.ContestController.quitContest(id, playerId)
GET           /api/contest/:id/positions/:playerId                  com.shocktrade.controllers.ContestController.getEnrichedPositions(id, playerId)
GET           /api/contest/:id/rankings                             com.shocktrade.controllers.ContestController.getContestRankings(id)
GET           /api/contest/:id/start                                com.shocktrade.controllers.ContestController.startContest(id)

GET           /api/contests/player/:playerId                        com.shocktrade.controllers.ContestController.getContestsByPlayerID(playerId)
GET           /api/contests/player/:playerId/totalInvestment        com.shocktrade.controllers.ContestController.getTotalInvestment(playerId)
POST          /api/contests/search                                  com.shocktrade.controllers.ContestController.contestSearch

# Orders
PUT           /api/order/:id/:playerId                              com.shocktrade.controllers.ContestController.createOrder(id, playerId)
DELETE        /api/order/:id/:playerId/:orderId                     com.shocktrade.controllers.ContestController.cancelOrder(id, playerId, orderId)

# Positions
GET           /api/positions/:playerId                              com.shocktrade.controllers.ContestController.getHeldSecurities(playerId)

# News
GET           /api/news/sources                                     com.shocktrade.controllers.NewsController.getSources
GET           /api/news/feed/:id                                    com.shocktrade.controllers.NewsController.getFeed(id)

# Explore
GET           /api/explore/symbol/:symbol                           com.shocktrade.controllers.QuotesController.getSectorInfo(symbol)
GET           /api/explore/sectors                                  com.shocktrade.controllers.QuotesController.exploreSectors(userId ?= null)
GET           /api/explore/industries                               com.shocktrade.controllers.QuotesController.exploreIndustries(userId ?= null, sector)
GET           /api/explore/subIndustries                            com.shocktrade.controllers.QuotesController.exploreSubIndustries(userId ?= null, sector, industry)
GET           /api/explore/quotes                                   com.shocktrade.controllers.QuotesController.exploreQuotesBySubIndustry(userId ?= null, sector, industry, subIndustry)
GET           /api/explore/naics                                    com.shocktrade.controllers.QuotesController.exploreNAICSSectors
GET           /api/explore/sic                                      com.shocktrade.controllers.QuotesController.exploreSICSectors

# Exchanges
GET           /api/exchanges                                        com.shocktrade.controllers.QuotesController.getExchangeCounts
POST          /api/exchanges                                        com.shocktrade.controllers.ProfileController.setExchanges()

# Quotes
GET           /api/quotes/cached/:symbol                            com.shocktrade.controllers.QuotesController.getCachedQuote(symbol)
GET           /api/quotes/autocomplete                              com.shocktrade.controllers.QuotesController.autocomplete(searchTerm, maxResults:Int)
POST          /api/quotes/list                                      com.shocktrade.controllers.QuotesController.getQuotes
GET           /api/quotes/order/symbol/:symbol                      com.shocktrade.controllers.QuotesController.getOrderQuote(symbol)
POST          /api/quotes/pricing                                   com.shocktrade.controllers.QuotesController.getPricing
GET           /api/quotes/realTime/:symbol                          com.shocktrade.controllers.QuotesController.getRealtimeQuote(symbol)
GET           /api/quotes/riskLevel/:symbol                         com.shocktrade.controllers.QuotesController.getRiskLevel(symbol)
GET           /api/quotes/symbol/:symbol                            com.shocktrade.controllers.QuotesController.getQuote(symbol)
GET           /api/quotes/tradingHistory/:symbol                    com.shocktrade.controllers.QuotesController.getTradingHistory(symbol)

# Research
POST          /api/research/search                                  com.shocktrade.controllers.ResearchController.quoteSearch

# Online Status
GET           /api/online/:userID                                   com.shocktrade.controllers.OnlineStatusController.getStatus(userID)
POST          /api/online                                           com.shocktrade.controllers.OnlineStatusController.getGroupStatus
PUT           /api/online/:userID                                   com.shocktrade.controllers.OnlineStatusController.setIsOnline(userID)
DELETE        /api/online/:userID                                   com.shocktrade.controllers.OnlineStatusController.setIsOffline(userID)

# Profile Quotes
PUT           /api/profile/:id/exchange/:exchange                   com.shocktrade.controllers.QuotesController.addExchange(id, exchange)
DELETE        /api/profile/:id/exchange/:exchange                   com.shocktrade.controllers.QuotesController.removeExchange(id, exchange)
GET           /api/profile/:id/exchanges                            com.shocktrade.controllers.ProfileController.getExchanges(id)
GET           /api/profile/:id/explore/sectors                      com.shocktrade.controllers.QuotesController.exploreSectors(id)
GET           /api/profile/:id/explore/industries                   com.shocktrade.controllers.QuotesController.exploreIndustries(id, sector)
GET           /api/profile/:id/explore/subIndustries                com.shocktrade.controllers.QuotesController.exploreSubIndustries(id, sector, industry)
GET           /api/profile/:id/explore/quotes                       com.shocktrade.controllers.QuotesController.exploreQuotesBySubIndustry(id, sector, industry, subIndustry)
POST          /api/profile/:id/wallet                               com.shocktrade.controllers.ProfileController.deductFunds(id)

# Profile Users
POST          /api/profile/create                                   com.shocktrade.controllers.ProfileController.createProfile
PUT           /api/profile/:id/favorite/:symbol                     com.shocktrade.controllers.ProfileController.addFavoriteSymbol(id, symbol)
DELETE        /api/profile/:id/favorite/:symbol                     com.shocktrade.controllers.ProfileController.removeFavoriteSymbol(id, symbol)
PUT           /api/profile/:id/recent/:symbol                       com.shocktrade.controllers.ProfileController.addRecentSymbol(id, symbol)
DELETE        /api/profile/:id/recent/:symbol                       com.shocktrade.controllers.ProfileController.removeRecentSymbol(id, symbol)
GET           /api/profile/facebook/:fbid                           com.shocktrade.controllers.ProfileController.findProfileByFacebookID(fbid)
POST          /api/profile/facebook/friends                         com.shocktrade.controllers.ProfileController.findFacebookFriends

# Profile Updates
GET           /api/updates/:userName/:limit                         com.shocktrade.controllers.ProfileController.getNotifications(userName, limit:Int)
DELETE        /api/updates                                          com.shocktrade.controllers.ProfileController.deleteNotifications()

# Sessions
GET           /api/session/list                                     com.shocktrade.controllers.SessionsController.getSessions

# Trading
GET           /api/tradingProcess/cik                               com.shocktrade.controllers.TradingController.startCikUpdate
GET           /api/tradingProcess/keystats                          com.shocktrade.controllers.TradingController.startKeyStatisticsUpdate
GET           /api/tradingProcess/quotes                            com.shocktrade.controllers.TradingController.startStockQuoteUpdate
GET           /api/tradingProcess/regsho/:date                      com.shocktrade.controllers.TradingController.startRegSHOUpdate(date)
GET           /api/tradingClock/status/:lastUpdate                  com.shocktrade.controllers.TradingController.status(lastUpdate: Long)
GET           /api/tradingClock/delayUntilStart                     com.shocktrade.controllers.TradingController.delayUntilTradingStart

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                         controllers.Assets.versioned(path="/public", file: Asset)
GET           /webjars/*file                                        controllers.WebJarAssets.at(file)

