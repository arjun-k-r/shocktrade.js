########################################################################################################################
#       View Routes
########################################################################################################################

GET           /                                                              @com.shocktrade.controllers.Application.index
GET           /assets/views/about/me.htm                                     @com.shocktrade.controllers.Application.aboutMe
GET           /assets/views/about/us.htm                                     @com.shocktrade.controllers.Application.aboutUs
GET           /assets/views/about/investors.htm                              @com.shocktrade.controllers.Application.investors
GET           /assets/views/admin/inspect.htm                                @com.shocktrade.controllers.Application.inspectView
GET           /assets/views/connect/connect.htm                              @com.shocktrade.controllers.Application.connectView
GET           /assets/views/dashboard/chat.htm                               @com.shocktrade.controllers.Application.chatView
GET           /assets/views/dashboard/dashboard.htm                          @com.shocktrade.controllers.Application.dashboardView
GET           /assets/views/dashboard/exposure.htm                           @com.shocktrade.controllers.Application.exposureView
GET           /assets/views/dashboard/orders_active.htm                      @com.shocktrade.controllers.Application.ordersActiveView
GET           /assets/views/dashboard/orders_closed.htm                      @com.shocktrade.controllers.Application.ordersClosedView
GET           /assets/views/dashboard/performance.htm                        @com.shocktrade.controllers.Application.performanceView
GET           /assets/views/dashboard/positions.htm                          @com.shocktrade.controllers.Application.positionsView

GET           /assets/views/discover/discover.htm                            @com.shocktrade.controllers.Application.discoverView
GET           /assets/views/discover/expanders/balance_sheet.htm             @com.shocktrade.controllers.Application.balanceSheetView
GET           /assets/views/discover/expanders/dividends_splits.htm          @com.shocktrade.controllers.Application.dividendsSplitsView
GET           /assets/views/discover/expanders/income_statement.htm          @com.shocktrade.controllers.Application.incomeStatementView
GET           /assets/views/discover/expanders/price_performance.htm         @com.shocktrade.controllers.Application.pricePerformanceView
GET           /assets/views/discover/expanders/share_statistics.htm          @com.shocktrade.controllers.Application.shareStatisticsView
GET           /assets/views/discover/expanders/valuation_measures.htm        @com.shocktrade.controllers.Application.valuationMeasuresView

GET           /assets/views/explore/drill_down.htm                           @com.shocktrade.controllers.Application.exploreView
GET           /assets/views/news/news_center.htm                             @com.shocktrade.controllers.Application.newsCenterView
GET           /assets/views/play/search.htm                                  @com.shocktrade.controllers.Application.searchView
GET           /assets/views/profile/home.htm                                 @com.shocktrade.controllers.Application.homeView
GET           /assets/views/research/research.htm                            @com.shocktrade.controllers.Application.researchView
GET           /websocket                                                     @com.shocktrade.controllers.Application.webSocket

########################################################################################################################
#       API Routes
########################################################################################################################

# Charts
GET           /api/charts/exposure/exchange/:id/:userID                      @com.shocktrade.controllers.ChartController.getExposureByExchange(id, userID)
GET           /api/charts/exposure/industry/:id/:userID                      @com.shocktrade.controllers.ChartController.getExposureByIndustry(id, userID)
GET           /api/charts/exposure/market/:id/:userID                        @com.shocktrade.controllers.ChartController.getExposureByMarket(id, userID)
GET           /api/charts/exposure/sector/:id/:userID                        @com.shocktrade.controllers.ChartController.getExposureBySector(id, userID)
GET           /api/charts/exposure/securities/:id/:userID                    @com.shocktrade.controllers.ChartController.getExposureBySecurities(id, userID)
GET           /api/charts/stock/:symbol/:size/:range                         @com.shocktrade.controllers.ChartController.getStockChart(symbol, size, range)
GET           /api/charts/ratings/:symbol                                    @com.shocktrade.controllers.ChartController.getAnalystRatings(symbol)

# Contest
PUT           /api/contest                                                   @com.shocktrade.controllers.ContestController.createContest
GET           /api/contest/:id                                               @com.shocktrade.controllers.ContestController.getContestByID(id)
DELETE        /api/contest/:id                                               @com.shocktrade.controllers.ContestController.deleteContestByID(id)
PUT           /api/contest/:id/chat                                          @com.shocktrade.controllers.ContestController.createChatMessage(id)
GET           /api/contest/:id/close                                         @com.shocktrade.controllers.ContestController.closeContest(id)
POST          /api/contest/:id/host                                          @com.shocktrade.controllers.ContestController.updateProcessingHost(id)
GET           /api/contest/:id/margin/:playerId/marketValue                  @com.shocktrade.controllers.ContestController.getMarginMarketValue(id, playerId)
PUT           /api/contest/:id/margin/:playerId                              @com.shocktrade.controllers.ContestController.createMarginAccount(id, playerId)
POST          /api/contest/:id/margin/:playerId                              @com.shocktrade.controllers.ContestController.transferFundsBetweenAccounts(id, playerId)
GET           /api/contest/:id/orders/:playerId                              @com.shocktrade.controllers.ContestController.getEnrichedOrders(id, playerId)
GET           /api/contest/:id/perks                                         @com.shocktrade.controllers.ContestController.getAvailablePerks(id)
GET           /api/contest/:id/perks/:playerId                               @com.shocktrade.controllers.ContestController.getPlayerPerks(id, playerId)
PUT           /api/contest/:id/perks/:playerId                               @com.shocktrade.controllers.ContestController.purchasePerks(id, playerId)
PUT           /api/contest/:id/player                                        @com.shocktrade.controllers.ContestController.joinContest(id)
GET           /api/contest/:id/player/:playerId                              @com.shocktrade.controllers.ContestController.getContestParticipant(id, playerId)
DELETE        /api/contest/:id/player/:playerId                              @com.shocktrade.controllers.ContestController.quitContest(id, playerId)
GET           /api/contest/:id/positions/:playerId                           @com.shocktrade.controllers.ContestController.getEnrichedPositions(id, playerId)
GET           /api/contest/:id/rankings                                      @com.shocktrade.controllers.ContestController.getContestRankings(id)
GET           /api/contest/:id/start                                         @com.shocktrade.controllers.ContestController.startContest(id)

# Contests
GET           /api/contests/player/:playerId                                 @com.shocktrade.controllers.ContestController.getContestsByPlayerID(playerId)
GET           /api/contests/player/:playerId/totalInvestment                 @com.shocktrade.controllers.ContestController.getTotalInvestment(playerId)
POST          /api/contests/search                                           @com.shocktrade.controllers.ContestController.contestSearch

# Explore
GET           /api/explore/symbol/:symbol                                    @com.shocktrade.controllers.ExploreController.getSectorInfo(symbol)
GET           /api/explore/sectors                                           @com.shocktrade.controllers.ExploreController.exploreSectors(userId ?= null)
GET           /api/explore/industries                                        @com.shocktrade.controllers.ExploreController.exploreIndustries(userId ?= null, sector)
GET           /api/explore/subIndustries                                     @com.shocktrade.controllers.ExploreController.exploreSubIndustries(userId ?= null, sector, industry)
GET           /api/explore/quotes                                            @com.shocktrade.controllers.ExploreController.exploreQuotesBySubIndustry(userId ?= null, sector, industry, subIndustry)
GET           /api/explore/naics                                             @com.shocktrade.controllers.ExploreController.exploreNAICSSectors
GET           /api/explore/sic                                               @com.shocktrade.controllers.ExploreController.exploreSICSectors

# News
GET           /api/news/sources                                              @com.shocktrade.controllers.NewsController.getSources
GET           /api/news/feed/:id                                             @com.shocktrade.controllers.NewsController.getFeed(id)

# Online Status
POST          /api/online                                                    @com.shocktrade.controllers.OnlineStatusController.getGroupStatus
GET           /api/online/:userID                                            @com.shocktrade.controllers.OnlineStatusController.getStatus(userID)
PUT           /api/online/:userID                                            @com.shocktrade.controllers.OnlineStatusController.setIsOnline(userID)
DELETE        /api/online/:userID                                            @com.shocktrade.controllers.OnlineStatusController.setIsOffline(userID)

# Orders
PUT           /api/order/:id/:playerId                                       @com.shocktrade.controllers.ContestController.createOrder(id, playerId)
DELETE        /api/order/:id/:playerId/:orderId                              @com.shocktrade.controllers.ContestController.cancelOrder(id, playerId, orderId)

# Positions
GET           /api/positions/:playerId                                       @com.shocktrade.controllers.ContestController.getHeldSecurities(playerId)

# Profile Users
POST          /api/profile/create                                            @com.shocktrade.controllers.ProfileController.createProfile
PUT           /api/profile/:id/favorite/:symbol                              @com.shocktrade.controllers.ProfileController.addFavoriteSymbol(id, symbol)
DELETE        /api/profile/:id/favorite/:symbol                              @com.shocktrade.controllers.ProfileController.removeFavoriteSymbol(id, symbol)
PUT           /api/profile/:id/recent/:symbol                                @com.shocktrade.controllers.ProfileController.addRecentSymbol(id, symbol)
DELETE        /api/profile/:id/recent/:symbol                                @com.shocktrade.controllers.ProfileController.removeRecentSymbol(id, symbol)
POST          /api/profile/:id/wallet                                        @com.shocktrade.controllers.ProfileController.deductFunds(id)
GET           /api/profile/facebook/:fbid                                    @com.shocktrade.controllers.ProfileController.findProfileByFacebookID(fbid)
POST          /api/profile/facebook/friends                                  @com.shocktrade.controllers.ProfileController.findFacebookFriends

# Quotes
GET           /api/exchanges                                                 @com.shocktrade.controllers.QuotesController.getExchangeCounts
GET           /api/quotes/autoComplete                                       @com.shocktrade.controllers.QuotesController.autoComplete(searchTerm, maxResults:Int)
GET           /api/quotes/cached/:symbol                                     @com.shocktrade.controllers.QuotesController.getCachedQuote(symbol)
POST          /api/quotes/list                                               @com.shocktrade.controllers.QuotesController.getQuotes
GET           /api/quotes/order/symbol/:symbol                               @com.shocktrade.controllers.QuotesController.getOrderQuote(symbol)
POST          /api/quotes/pricing                                            @com.shocktrade.controllers.QuotesController.getPricing
GET           /api/quotes/realTime/:symbol                                   @com.shocktrade.controllers.QuotesController.getRealtimeQuote(symbol)
GET           /api/quotes/riskLevel/:symbol                                  @com.shocktrade.controllers.QuotesController.getRiskLevel(symbol)
GET           /api/quotes/symbol/:symbol                                     @com.shocktrade.controllers.QuotesController.getQuote(symbol)
GET           /api/quotes/tradingHistory/:symbol                             @com.shocktrade.controllers.QuotesController.getTradingHistory(symbol)

# Research
POST          /api/research/search                                           @com.shocktrade.controllers.ResearchController.quoteSearch

# Trading Information and Processes
GET           /api/tradingClock/status/:lastUpdate                           @com.shocktrade.controllers.TradingController.status(lastUpdate: Long)
GET           /api/tradingClock/delayUntilStart                              @com.shocktrade.controllers.TradingController.delayUntilTradingStart

# Profile Updates
DELETE        /api/updates                                                   @com.shocktrade.controllers.ProfileController.deleteNotifications
GET           /api/updates/:userName/:limit                                  @com.shocktrade.controllers.ProfileController.getNotifications(userName, limit:Int)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                  controllers.Assets.versioned(path="/public", file: Asset)
GET           /webjars/*file                                                 controllers.WebJarAssets.at(file)
