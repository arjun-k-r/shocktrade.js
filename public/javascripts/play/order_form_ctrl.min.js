/**
 * Order Form Pop-pop Controller
 * @author lawrence.daniels@gmail.com
 */
angular
	.module('shocktrade')
	.controller('OrderFormCtrl', ['$scope', '$log', '$modalInstance', 'ContestService', 'QuoteService', 'contest', 'participant',
	                      function($scope, $log, $modalInstance, ContestService, QuoteService, contest, participant) {
	
	$scope.quote = {};
		
	$scope.init = function() {
		var scope = angular.element($("#order_dialog")).scope();
		$scope.orderQuote(QuoteService.lastSymbol);
		scope.order = {
			emailNotify: true
		};
	};
	
	$scope.autoCompleteSymbols = function(searchTerm) {
		return QuoteService.autoCompleteSymbols(searchTerm, 20)
			.then(function(response) { 
				return response.data;
			});
	};	
	
	$scope.orderQuote = function(ticker) {
		// determine the symbol
		var symbol = null;
		if(ticker.symbol) {
			symbol = ticker.symbol;
		}
		else {
			var index = ticker.indexOf(' ');
			symbol = (index == -1 ? ticker : ticker.substring(0, index-1)).toUpperCase();
		}
		
		if(symbol && (symbol.trim().length > 0)) {
			symbol = symbol.toUpperCase();
			ContestService
				.orderQuote(symbol)
				.then(function(data) {
					var scope = angular.element($("#order_dialog")).scope();
					if(data.length > 0) {
						var quote = data[0];
						scope.order.symbol = quote.symbol;
						scope.order.limitPrice = quote.lastTrade;
						scope.order.exchange = quote.exchange;
						scope.order.volumeAtOrderTime = quote.volume;
					}
					scope.quote = (data.length > 0) ? data[0] : { "symbol" : symbol };
				});
		}
	};
	
	$scope.getTotal = function(order) {
		var price = order.limitPrice ? parseFloat(order.limitPrice) : 0;
		var quantity = order.quantity ? parseFloat(order.quantity) : 0;
		var total = (price * quantity);
		return (total != 0) ? total : 0.00;
	};
	
	$scope.validate = function(order) {
		// lookup the dialog's scope
		var scope = angular.element($("#order_dialog")).scope();
		scope.messages = [];
		
		// perform the validations
		if( ! order.orderType ) scope.messages.push("No Order Type (BUY or SELL) specified");
		if( ! order.priceType ) scope.messages.push("No Pricing Method specified");
		if( ! order.orderTerm ) scope.messages.push("No Order Term specified");
		if( ! order.quantity || order.quantity == 0 ) scope.messages.push("No quantity specified");
		return scope.messages.length == 0;
	};
	
	$scope.ok = function() {
		var scope = angular.element($("#order_dialog")).scope();
		if( $scope.validate(scope.order) ) {
			scope.order.contestId = contest._id.$oid;
			scope.order.playerName = participant.name;

			ContestService.createOrder(scope.order).then(
				function(participant) {
					$modalInstance.close(participant);
				},
				function(err) {
					scope.messages = [];
					scope.messages.push(err.data);
				});
		}
	};

	$scope.cancel = function() {
		$modalInstance.dismiss('cancel');
	};
	
}]);