/**
 * Favorite Symbols Service
 * @author lawrence.daniels@gmail.com
 */
angular
	.module('shocktrade')
	.factory('FavoriteSymbols', function($http, $log, $q, MySession) {
		
	var service = {
		symbols: [],
		quotes : []
	};

	service.isEmpty = function() {
		return !service.symbols.length;
	};
	
	service.isFavorite = function(symbol) {
		return indexOf(symbol) != -1;
	};

	service.add = function(symbol) {
		var index = indexOf(symbol);
		if( index == -1) {
			// get the user ID
			var id = MySession.userProfile._id.$oid;
			
			// add the symbol to the profile's Favorites
			$http({ method:'PUT', url:'/api/profile/' + id + '/favorite/' + symbol }).then(function(response) {
				service.symbols.unshift(symbol);
				loadQuotes();
			});
		}
	};
	
	service.remove = function(symbol) {
		var index = indexOf(symbol);
		if( index != -1) {
			// get the user ID
			var id = MySession.userProfile._id.$oid;
			
			// remove the symbol from the profile's Favorites			
			$http({ method:'DELETE', url:'/api/profile/' + id + '/favorite/' + symbol }).then(function(response) {
				service.symbols.splice(index, 1);
				loadQuotes();
			});
		}
	};
	
	service.setSymbols = function(symbols) {
		service.symbols = symbols;
		loadQuotes();
	};

	service.getQuotes = function() {
		return service.quotes;
	};

	service.updateQuote = function(quote) {
		for(var n = 0; n < service.quotes.length; n++) {
			if(service.quotes[n].symbol == quote.symbol) {
				service.quotes[n] = quote;
				return;
			}
		}
	};

	function indexOf(symbol) {
		for(var n = 0; n < service.symbols.length; n++) {
			if( symbol == service.symbols[n]) {
				return n;
			}
		}
		return -1;
	};
	
	function loadQuotes() {
		return $http({
			method : 'POST',
			url : '/api/quotes/list',
			data : angular.toJson(service.symbols)
		}).then(function(response) {
			var quotes = response.data;
			service.quotes = quotes;
			return quotes;
		});
	};
	
	// pre-load the quotes
	loadQuotes().then(function(data) {
		//console.log("FavoriteSymbols: Loaded symbols for " + JSON.stringify(service.symbols));
		//console.log("FavoriteSymbols: Loaded quotes for " + JSON.stringify(service.quotes));
		//console.log("FavoriteSymbols: Quotes = " + JSON.stringify(data, null , '\t'));
	});
	
	return service;
});