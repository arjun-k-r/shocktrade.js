app = angular.module('shocktrade')

class PlaySearchCtrl
  @inject: ['$scope', '$location', '$log', '$timeout', 'MySession', 'ContestService', 'Errors']
  constructor: ($scope, $location, $log, $timeout, MySession, ContestService, Errors) ->
    @scope = @$scope
    @scope.contestId = null
    @scope.searchOptions =
      activeOnly: true
      available: false
      perksAllowed: false
      levelCap: "1"
      levelCapAllowed: false
    @scope.searchResults = []
    @scope.myContests = []
    @scope.searchMyGame = ""

  containsPlayer: (contest, userProfile) ->
    userProfile.id and findPlayerByID(contest, userProfile.id) != null

  findPlayerByID: (contest, playerId) ->
    for participant in contest.participants
      return participant if participant._id.$oid == playerId
    null

  getAvailableCount: () ->
    @count = 0;
    for r in @scope.searchResults
      @count++ if r.status is 'ACTIVE'
    @count

  isMedalist: (rank) ->
    rank is '1st' or rank is '2nd' or rank is '3rd'

  joinedParticipant: (contest, userProfile) ->
    containsPlayer(contest, userProfile)

  getMyContests: (searchTerm) ->
    @term = searchTerm.toLowerCase()
    if not @term or @term == "" then @scope.myContests
    else @scope.myContests.filter((c) -> c.name.toLowerCase().indexOf(term) != -1)

  loadContestsByPlayerID: (playerId) ->
    if playerId != null
      @scope.startLoading()
      @scope.message = ""
      ContestService.getContestsByPlayerID(playerId)
      .then (contests) =>
        @scope.myContests = contests
        if (contests.length > 0 && @scope.contestId == "")
          @scope.contestId = contests[0]._id.$oid;
          MySession.contestId = @scope.contestId;
        @scope.stopLoading()
      (err) =>
        @scope.message = "Failed to load My Contests"
        @scope.stopLoading()

  quitGame: () ->
    @scope.quitingGame = true
    @contestId = MySession.contestId
    @playerId = MySession.userProfile.id
    log.info("Quiting game # " + contestId + "...")
    @ContestService.quitContest(contestId, playerId)
    .then (result) ->
      $log.info("quit game succeeded")
      $timeout ( -> @@scope.quitingGame = false ), 500
    (err) ->
      $log.error("quit game failed")
      $timeout ( -> @@scope.quitingGame = false ), 500

  #################################################################
  ##          Event Listeners
  #################################################################

  ##  Listen for contest creation events
  ##
  @scope.$on("contest_created", (event, contest) ->
    $log.info("New contest created '" + contest.name + "'")
    insertID(contest)
    @scope.searchResults.push(contest))

  ## Listen for contest deletion events
  ##
  @scope.$on("contest_deleted", (event, response) ->
    $log.info("Contest '" + response.id + "' deleted")
    removeContestFromList(response.id)
    # if the delete contest is selected, change the selection
    @contest = @scope.searchResults[0] if @scope.searchResults.length >= 1
    @scope.selectContest(@contest) if isContestSelected(response.id))

  ## Listen for contest update events
  ##
  @scope.$on("contest_updated", (event, args) ->
    $log.info("Contest '" + contest.name + "' updated")
    insertID(contest))

  ## watch the contest ID and search options
  ##
  @scope.$watch("contestId", (oldVal, newVal) -> @scope.loadContest(@scope.contestId))
  @scope.$watch("searchOptions", () -> @scope.contestSearch(@scope.searchOptions))

  ## watch for changes to the player's profile
  ##
  @scope.$watch("MySession.userProfile", (oldVal, newVal) ->
    @scope.contestId = MySession.contestId
    if MySession.userProfile.name is not 'Spectator'
      # load the player's games
      @scope.loadContestsByPlayerID(MySession.userProfile.id)
      # load the contest
      @scope.loadContest(@scope.contestId))

  ## load the restriction types
  ##
  @scope.loadRestrictionTypes()

app.controller 'PlaySearchCtrl', PlaySearchCtrl